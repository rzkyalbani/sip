// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Book {
  id                Int         @id @default(autoincrement())
  title             String
  authorId          Int
  publisherId       Int
  isbn              String?
  publicationYear   Int?
  categoryId        Int
  description       String?     @db.Text
  quantity          Int         @default(1)
  availableQuantity Int         @default(1)
  location          String?     
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  author            Author      @relation(fields: [authorId], references: [id])
  publisher         Publisher   @relation(fields: [publisherId], references: [id])
  category          Category    @relation(fields: [categoryId], references: [id])
  borrowings        Borrowing[]
}

model Author {
  id        Int      @id @default(autoincrement())
  name      String
  bio       String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  books     Book[]
}

model Publisher {
  id        Int      @id @default(autoincrement())
  name      String
  address   String?  @db.Text
  contact   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  books     Book[]
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  books       Book[]
}

model Member {
  id         Int         @id @default(autoincrement())
  memberCode String      @unique
  name       String
  email      String      @unique
  phone      String?
  address    String?     @db.Text
  status     MemberStatus @default(ACTIVE)
  joinDate   DateTime    @default(now())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  
  borrowings Borrowing[]
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(STAFF)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  borrowings Borrowing[]
}

model Borrowing {
  id         Int            @id @default(autoincrement())
  memberId   Int
  bookId     Int
  borrowDate DateTime       @default(now())
  dueDate    DateTime
  returnDate DateTime?
  status     BorrowingStatus @default(BORROWED)
  createdBy  Int
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  
  member     Member         @relation(fields: [memberId], references: [id])
  book       Book           @relation(fields: [bookId], references: [id])
  user       User           @relation(fields: [createdBy], references: [id])
  fine       Fine?
}

model Fine {
  id          Int        @id @default(autoincrement())
  borrowingId Int        @unique
  amount      Decimal    @db.Decimal(10, 2)
  paidAmount  Decimal    @default(0) @db.Decimal(10, 2)
  paidDate    DateTime?
  status      FineStatus @default(UNPAID)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  borrowing   Borrowing  @relation(fields: [borrowingId], references: [id])
}

enum MemberStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum UserRole {
  ADMIN
  STAFF
}

enum BorrowingStatus {
  BORROWED
  RETURNED
  OVERDUE
}

enum FineStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
}